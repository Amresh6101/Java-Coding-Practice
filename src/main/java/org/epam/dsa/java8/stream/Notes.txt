If we want to represent a group of objects as a single entity then we should go for collection.
But if we want to process objects from the collection then we should go for streams.

====
There are broadly 3 types of operations that are carried over streams namely as follows as depicted from the image shown above:

Intermediate operations
Terminal operations
Short-circuit operations
Short circuiting operations are the operations which don‚Äôt need the whole stream to be processed to produce a result. For example ‚Äì findFirst(), findAny(), limit() etc.
==
1) The main difference between intermediate and terminal operations is that intermediate operations return a stream as a result and terminal operations return non-stream values like primitive or object or collection or may not return anything.
2) Intermediate operations are lazily loaded. When you call intermediate operations, they are actually not executed. They are just stored in the memory and executed when the terminal operation is called on the stream.

3) As the names suggest, intermediate operations doesn‚Äôt give end result. They just transform one stream to another stream. On the other hand, terminal operations give end result.

Intermediate Operations :

map(), filter(), distinct(), sorted(), limit(), skip()

Terminal Operations :

forEach(), toArray(), reduce(), collect(), min(), max(), count(), anyMatch(), allMatch(), noneMatch(), findFirst(), findAny()

üîÅ Intermediate Operations

===========================
They return Stream.

Can be chained together to form a pipeline of operations.

A pipeline can contain any number of intermediate operations.

They are lazily loaded ‚Äî nothing happens until a terminal operation is invoked.

They don‚Äôt produce a final result on their own.

Examples:

filter()

map()

distinct()

sorted()

limit()

skip()

‚úÖ Terminal Operations
They return non-Stream values.

Cannot be chained ‚Äî they are the end of the pipeline.

A pipeline can have only one terminal operation, and it must be at the end.

They are eagerly loaded ‚Äî they trigger the execution of the whole pipeline.

They produce the final result.

Examples:

forEach()

toArray()

reduce()

collect()

min(), max()

count()

anyMatch(), allMatch(), noneMatch()

findFirst(), findAny()

==========================
 ‚úÖ reduce() with identity:
 int product = list.stream().reduce(1, (a, b) -> a * b);

         Always returns a non-null value (even if the stream is empty).

         Identity acts as the starting point.
         Returns: T (the same type as the elements in the stream).

  ‚ùì reduce() without identity:

  Optional<Integer> product = list.stream().reduce((a, b) -> a * b);

  Returns an Optional<T> because there might be no result (if the stream is empty).

  No identity value to fall back on.

  If the stream is empty, you‚Äôll get Optional.empty().

  Think identity  like it.
  int result = 1;  // identity
  for (int num : numbers) {
      result = result * num;
  }

// sorting map-> Map.Entry.ComparingByKey()
// sorting map-> Map.Entry.ComparingByValue()

// function.identity()

List<String> fruits = List.of("apple", "banana", "cherry");

Map<String, String> fruitMap = fruits.stream()
        .collect(Collectors.toMap(
            Function.identity(),    // key is the string itself
            fruit -> fruit.toUpperCase() // value is the uppercase version
        ));

System.out.println(fruitMap);
// Output: {apple=APPLE, banana=BANANA, cherry=CHERRY}